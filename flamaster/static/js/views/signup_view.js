// Generated by CoffeeScript 1.3.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

define(['chaplin/view', 'text!templates/sign_up.hbs', 'text!templates/sign_up_complete.hbs'], function(View, template, templateComplete) {
  'use strict';

  var SignUpView;
  return SignUpView = (function(_super) {

    __extends(SignUpView, _super);

    SignUpView.name = 'SignUpView';

    function SignUpView() {
      this.displayErrors = __bind(this.displayErrors, this);

      this.signUp = __bind(this.signUp, this);
      return SignUpView.__super__.constructor.apply(this, arguments);
    }

    SignUpView.prototype.autoRender = true;

    SignUpView.prototype.containerSelector = "#content";

    SignUpView.prototype.id = "signup";

    SignUpView.template = template;

    SignUpView.prototype.initialize = function() {
      SignUpView.__super__.initialize.apply(this, arguments);
      console.log(this.template);
      return this.delegate('submit', "#sigup-form", this.signUp);
    };

    SignUpView.prototype.getTemplateData = function() {
      var data;
      data = {
        form: {
          id: 'sigup-form',
          method: 'post',
          action: '.'
        }
      };
      return data;
    };

    SignUpView.prototype.signUp = function(ev) {
      var _this = this;
      this.preventDefault(ev);
      this.clearErrors();
      return this.model.save(this.serializeForm(ev.target), {
        success: function(model, data) {
          console.log("SignUpView#signUp", data);
          _this.constructor.template = templateComplete;
          return _this.render();
        },
        error: this.displayErrors
      });
    };

    SignUpView.prototype.displayErrors = function(model, response) {
      var field, message, _ref, _results, _results1;
      console.log("SignUpView#displayErrors");
      if (response.responseText != null) {
        _ref = JSON.parse(response.responseText);
        _results = [];
        for (field in _ref) {
          message = _ref[field];
          _results.push(this.renderError(field, message));
        }
        return _results;
      } else {
        _results1 = [];
        for (field in response) {
          message = response[field];
          _results1.push(this.renderError(field, message));
        }
        return _results1;
      }
    };

    return SignUpView;

  })(View);
});
